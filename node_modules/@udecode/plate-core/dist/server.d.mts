import { Value, TEditor } from '@udecode/slate';
import { C as CreatePlateEditorOptions, b as PlateEditor, d as PlatePlugin, N as NoInfer, O as OverrideByKey, c as PlateProps, h as WithPlateOptions } from './createPlateEditor-BNJf_PoU.mjs';
export { bR as ApplyDeepToNodesOptions, a8 as CARRIAGE_RETURN, bb as CollapseWhiteSpaceState, br as DOMHandler, bq as DOMHandlerReturnType, bs as DOMHandlers, bn as DOM_HANDLERS, bu as Decorate, bt as DecorateEntry, D as DefaultLeaf, bv as DeserializeHtml, ag as DeserializeHtmlChildren, ah as DeserializeHtmlNodeReturnType, E as ELEMENT_DEFAULT, bl as EXPOSED_STORE_KEYS, a1 as EventEditorState, cn as GetInjectPropsOptions, co as GetInjectPropsReturnType, bo as HandlerReturnType, bw as HotkeyPlugin, cs as Hotkeys, bz as InjectComponent, bx as InjectComponentProps, by as InjectComponentReturnType, bB as InjectProps, bW as InjectedPlugin, K as KEY_DESERIALIZE_AST, ae as KEY_DESERIALIZE_HTML, t as KEY_EDITOR_PROTOCOL, $ as KEY_EVENT_EDITOR, y as KEY_HISTORY, B as KEY_INLINE_VOID, J as KEY_INSERT_DATA, Q as KEY_LENGTH, X as KEY_NODE_FACTORY, Z as KEY_PREV_SELECTION, bp as KeyboardEventHandler, bC as KeyboardHandler, bD as KeyboardHandlerReturnType, a9 as LINE_FEED, M as LengthPlugin, aa as NO_BREAK_SPACE, bm as Nullable, bE as OnChange, P as PlateChangeKey, bg as PlateEditorMethods, bG as PlatePluginComponent, bI as PlatePluginInsertData, bH as PlatePluginInsertDataOptions, bK as PlatePluginKey, bL as PlatePluginProps, bh as PlateRenderElementProps, bi as PlateRenderLeafProps, bj as PlateRenderNodeProps, bk as PlateStoreState, bJ as PluginKey, bF as PluginOptions, bM as RenderAfterEditable, e as RenderElement, R as RenderElementFn, f as RenderLeaf, ab as SPACE, bN as SerializeHtml, ac as TAB, T as TEditableProps, bQ as TRenderElementProps, bO as ToggleMarkPlugin, be as ToggleNodeTypeOptions, bA as TransformOptions, ba as TrimEndRule, b9 as TrimStartRule, b8 as WhiteSpaceRule, bP as WithOverride, W as WithPlatePlugin, ad as ZERO_WIDTH_SPACE, bS as applyDeepToNodes, ai as cleanHtmlBrElements, aj as cleanHtmlCrLf, ak as cleanHtmlEmptyElements, al as cleanHtmlFontElements, am as cleanHtmlLinkElements, an as cleanHtmlTextNodes, a_ as collapseString, a$ as collapseWhiteSpace, b0 as collapseWhiteSpaceChildren, b1 as collapseWhiteSpaceElement, b2 as collapseWhiteSpaceNode, b3 as collapseWhiteSpaceText, ce as convertDomEventToSyntheticEvent, ao as copyBlockMarksToSpanChild, s as createDeserializeAstPlugin, af as createDeserializeHtmlPlugin, x as createEditorProtocolPlugin, a0 as createEventEditorPlugin, A as createHistoryPlugin, cr as createHotkey, H as createInlineVoidPlugin, L as createInsertDataPlugin, V as createLengthPlugin, Y as createNodeFactoryPlugin, bT as createPluginFactory, bU as createPlugins, _ as createPrevSelectionPlugin, ap as deserializeHtml, aq as deserializeHtmlElement, ar as deserializeHtmlNode, as as deserializeHtmlNodeChildren, b7 as endInlineFormattingContext, a3 as eventEditorActions, a4 as eventEditorSelectors, a2 as eventEditorStore, at as findHtmlElement, bV as flattenDeepPlugins, a6 as getEventPlateId, av as getHtmlComments, bX as getInjectedPlugins, bY as getKeyByType, bZ as getKeysByTypes, b_ as getPlugin, b$ as getPluginInjectProps, c0 as getPluginOptions, c1 as getPluginType, c2 as getPluginTypes, c3 as getPlugins, c4 as getPluginsByKey, c5 as getRenderNodeProps, cu as getSlateClass, aw as htmlBodyToFragment, ax as htmlBrToNewLine, ay as htmlElementToElement, az as htmlElementToLeaf, aA as htmlStringToDOMNode, aB as htmlTextNodeToString, b4 as inferWhiteSpaceRule, aC as inlineTagNames, cf as isEventHandled, aD as isHtmlBlockElement, aE as isHtmlComment, aF as isHtmlElement, aG as isHtmlFragmentHref, aH as isHtmlInlineElement, aI as isHtmlTable, aJ as isHtmlText, b5 as isLastNonEmptyTextOfInlineFormattingContext, aK as isOlSymbol, c6 as mapInjectPropsToPlugin, c7 as mergeDeepPlugins, c8 as mergeDeepToNodes, c9 as mockPlugin, ca as normalizeDescendantsToDocumentFragment, cb as normalizeInitialValue, cc as overridePluginsByKey, aL as parseHtmlDocument, aM as parseHtmlElement, cd as pipeDecorate, aN as pipeDeserializeHtmlElement, aO as pipeDeserializeHtmlLeaf, cg as pipeHandler, ch as pipeInjectProps, ci as pipeInsertDataQuery, cj as pipeInsertFragment, ck as pipeOnChange, cl as pipeTransformData, cm as pipeTransformFragment, aP as pluginDeserializeHtml, cp as pluginInjectProps, aQ as postCleanHtml, aR as preCleanHtml, aS as removeHtmlNodesBetweenComments, aT as removeHtmlSurroundings, aU as replaceTagName, bc as resetEditor, bd as resetEditorChildren, cq as setDefaultPlugin, cs as sharedHotkeys, au as someHtmlElement, bf as toggleNodeType, aV as traverseHtmlComments, aW as traverseHtmlElements, aX as traverseHtmlNode, aY as traverseHtmlTexts, aZ as unwrapHtmlElement, b6 as upsertInlineFormattingContext, a5 as useEventEditorSelectors, a7 as useFocusEditorEvents, v as withEditorProtocol, ct as withHOC, F as withInlineVoid, I as withInsertData, S as withLength, z as withTHistory } from './createPlateEditor-BNJf_PoU.mjs';
import * as _udecode_utils from '@udecode/utils';
export { nanoid } from 'nanoid';
export { StateActions as ZustandStateActions, StoreApi as ZustandStoreApi, createZustandStore } from 'zustand-x';
export { isHotkey } from 'is-hotkey';
import 'react';
import 'slate';
import 'slate-history';
import '@udecode/slate-utils';
import '@udecode/slate-react';
import 'slate-react';
import 'slate-react/dist/components/editable';
import 'jotai-x';
import 'jotai';

/**
 * Create a plate editor with:
 *
 * - `createTEditor` or custom `editor`
 * - `withPlate`
 * - Custom `components`
 */
declare const createPlateEditor: <V extends Value = Value, E extends TEditor<V> = TEditor<V>>({ components, editor, normalizeInitialValue: shouldNormalizeInitialValue, overrideByKey, plugins, ...withPlateOptions }?: CreatePlateEditorOptions<V, E>) => E & PlateEditor<V>;

declare const withReact: <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(editor: E) => E;
/** @see {@link withReact} with noop methods for server-side support. */
declare const createReactPlugin: <OP = _udecode_utils.AnyObject, OV extends Value = Value, OE extends PlateEditor<OV> = PlateEditor<OV>>(override?: Partial<PlatePlugin<NoInfer<OP>, OV, OE>> | undefined, overrideByKey?: OverrideByKey<OV, OE>) => PlatePlugin<NoInfer<OP>, OV, OE>;

declare const setPlatePlugins: <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(editor: E, { disableCorePlugins, maxLength, plugins: _plugins, }: Pick<PlateProps<V, E>, 'disableCorePlugins' | 'maxLength' | 'plugins'>) => void;

/** `withPlate` with server-side support. */
declare const withPlate: <V extends Value = Value, E extends TEditor<V> = TEditor<V>>(e: E, { disableCorePlugins, id, maxLength, plugins, }?: WithPlateOptions<V, E & PlateEditor<V>>) => E & PlateEditor<V>;

export { NoInfer, OverrideByKey, PlateEditor, PlatePlugin, createPlateEditor, createReactPlugin, setPlatePlugins, withPlate, withReact };
